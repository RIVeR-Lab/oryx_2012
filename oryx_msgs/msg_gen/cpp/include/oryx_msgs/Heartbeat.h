/* Auto-generated by genmsg_cpp for file /home/parallels/groovy_workspace/oryx/oryx_msgs/msg/Heartbeat.msg */
#ifndef ORYX_MSGS_MESSAGE_HEARTBEAT_H
#define ORYX_MSGS_MESSAGE_HEARTBEAT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace oryx_msgs
{
template <class ContainerAllocator>
struct Heartbeat_ {
  typedef Heartbeat_<ContainerAllocator> Type;

  Heartbeat_()
  : timestamp()
  , node_id(0)
  {
  }

  Heartbeat_(const ContainerAllocator& _alloc)
  : timestamp()
  , node_id(0)
  {
  }

  typedef ros::Time _timestamp_type;
  ros::Time timestamp;

  typedef uint16_t _node_id_type;
  uint16_t node_id;


  typedef boost::shared_ptr< ::oryx_msgs::Heartbeat_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::oryx_msgs::Heartbeat_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Heartbeat
typedef  ::oryx_msgs::Heartbeat_<std::allocator<void> > Heartbeat;

typedef boost::shared_ptr< ::oryx_msgs::Heartbeat> HeartbeatPtr;
typedef boost::shared_ptr< ::oryx_msgs::Heartbeat const> HeartbeatConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::oryx_msgs::Heartbeat_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::oryx_msgs::Heartbeat_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace oryx_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::oryx_msgs::Heartbeat_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::oryx_msgs::Heartbeat_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::oryx_msgs::Heartbeat_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3ee530bfddeca639d0cefeb562b0d361";
  }

  static const char* value(const  ::oryx_msgs::Heartbeat_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3ee530bfddeca639ULL;
  static const uint64_t static_value2 = 0xd0cefeb562b0d361ULL;
};

template<class ContainerAllocator>
struct DataType< ::oryx_msgs::Heartbeat_<ContainerAllocator> > {
  static const char* value() 
  {
    return "oryx_msgs/Heartbeat";
  }

  static const char* value(const  ::oryx_msgs::Heartbeat_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::oryx_msgs::Heartbeat_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#Message for sending a heartbeat to the oryx_diagnostics management software.\n\
\n\
#timestamp (does not use header to save weight. Used by the diagnostics package for transmission latency purposes\n\
time timestamp\n\
\n\
#The unique node_id that was provided at registration with the diagnostics system to the node\n\
uint16 node_id\n\
\n\
\n\
";
  }

  static const char* value(const  ::oryx_msgs::Heartbeat_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::oryx_msgs::Heartbeat_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::oryx_msgs::Heartbeat_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.timestamp);
    stream.next(m.node_id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Heartbeat_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::oryx_msgs::Heartbeat_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::oryx_msgs::Heartbeat_<ContainerAllocator> & v) 
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "node_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.node_id);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ORYX_MSGS_MESSAGE_HEARTBEAT_H

