/* Auto-generated by genmsg_cpp for file /home/parallels/groovy_workspace/oryx/oryx_msgs/msg/Battery.msg */
#ifndef ORYX_MSGS_MESSAGE_BATTERY_H
#define ORYX_MSGS_MESSAGE_BATTERY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace oryx_msgs
{
template <class ContainerAllocator>
struct Battery_ {
  typedef Battery_<ContainerAllocator> Type;

  Battery_()
  : node(0)
  , voltage(0.0)
  {
  }

  Battery_(const ContainerAllocator& _alloc)
  : node(0)
  , voltage(0.0)
  {
  }

  typedef int16_t _node_type;
  int16_t node;

  typedef float _voltage_type;
  float voltage;


  typedef boost::shared_ptr< ::oryx_msgs::Battery_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::oryx_msgs::Battery_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Battery
typedef  ::oryx_msgs::Battery_<std::allocator<void> > Battery;

typedef boost::shared_ptr< ::oryx_msgs::Battery> BatteryPtr;
typedef boost::shared_ptr< ::oryx_msgs::Battery const> BatteryConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::oryx_msgs::Battery_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::oryx_msgs::Battery_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace oryx_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::oryx_msgs::Battery_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::oryx_msgs::Battery_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::oryx_msgs::Battery_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2d1e860aa474f2b66bc671e6980bbd27";
  }

  static const char* value(const  ::oryx_msgs::Battery_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2d1e860aa474f2b6ULL;
  static const uint64_t static_value2 = 0x6bc671e6980bbd27ULL;
};

template<class ContainerAllocator>
struct DataType< ::oryx_msgs::Battery_<ContainerAllocator> > {
  static const char* value() 
  {
    return "oryx_msgs/Battery";
  }

  static const char* value(const  ::oryx_msgs::Battery_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::oryx_msgs::Battery_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16 node\n\
float32 voltage\n\
\n\
\n\
";
  }

  static const char* value(const  ::oryx_msgs::Battery_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::oryx_msgs::Battery_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::oryx_msgs::Battery_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.node);
    stream.next(m.voltage);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Battery_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::oryx_msgs::Battery_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::oryx_msgs::Battery_<ContainerAllocator> & v) 
  {
    s << indent << "node: ";
    Printer<int16_t>::stream(s, indent + "  ", v.node);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ORYX_MSGS_MESSAGE_BATTERY_H

